<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_704397_generally.DriverUtils</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>DriverUtils</name>
        <script><![CDATA[var DriverUtils = Class.create();
DriverUtils.prototype = {
    initialize: function() {},

    isJuniorRookie: function(driverInfo) {
        if (driverInfo.helmet.nil()) {
            return true;
        } else {
            return false;
        }
    },

    getRandomAge: function(isJunior) {
        var ageInterval;
        var minAge;
        if (isJunior) {
            ageInterval = gs.getProperty('x_704397_generally.juniorRookieAgeInterval');
            minAge = gs.getProperty('x_704397_generally.juniorRookieMinAge');
        } else {
            ageInterval = gs.getProperty('x_704397_generally.rookieAgeInterval');
            minAge = gs.getProperty('x_704397_generally.rookieMinAge');
        }
        return Math.floor(Math.random() * ageInterval + parseInt(minAge));
    },

    getRandomSkill: function(isJunior) {
        var skillInterval;
        if (isJunior) {
            skillInterval = gs.getProperty('x_704397_generally.juniorRookieSkillInterval');
        } else {
            skillInterval = gs.getProperty('x_704397_generally.rookieSkillInterval');
        }
        return Math.floor(Math.random() * skillInterval);
    },

    generateRookie: function(driverInfo) {
        var rookie = new GlideRecord('x_704397_generally_driver');
        rookie.initialize();
        rookie.setValue('abbrev', driverInfo.getValue('sys_id'));
        rookie.setValue('display', driverInfo.getValue('abbrev'));
        rookie.setValue('age', this.getRandomAge(this.isJuniorRookie(driverInfo)));
        rookie.setValue('skill', this.getRandomSkill(this.isJuniorRookie(driverInfo)));
        var teamUtils = new TeamUtils();
        rookie.setValue('team', teamUtils.getEmploymentAgency());
        rookie.insert();
    },

    signContract: function(driver, team) {
        var signatory = new GlideRecord('x_704397_generally_driver');
        signatory.addQuery('sys_id', driver);
        signatory.query();

        if (signatory.next()) {
            signatory.setValue('display', signatory.getDisplayValue('abbrev') + " (" +
                team.getElement('name.abbrev') + ")");
            signatory.setValue('team', team.getValue('sys_id'));
            if (team.getValue('junior_driver') === driver) {
                signatory.setValue('junior', 'true');
            } else {
                signatory.setValue('junior', 'false');
            }
            signatory.update();
        }
    },

    getPositionCount: function(driver, position) {
        var result = new GlideRecord('x_704397_generally_result');
        result.addQuery('year', gs.getProperty('x_704397_generally.actualYear'));
        result.addQuery('driver', driver.getValue('sys_id'));
        result.addQuery('position', position);
        result.query();
        return result.getRowCount();
    },

    calculatePoints: function(driver, pointAllocation) {
        var points = 0;
        for (var i = 0; i < gs.getProperty('x_704397_generally.lastPosition'); i++) {
            points = points + this.getPositionCount(driver, i + 1) * parseInt(pointAllocation[i]);
        }
        return points;
    },

    updatePoints: function() {
        var driver = new GlideRecord('x_704397_generally_driver');
        var teamUtils = new TeamUtils();
        driver.addEncodedQuery(
            'team.year=' + gs.getProperty('x_704397_generally.actualYear') +
            '^team!=' + teamUtils.getEmploymentAgency()
        );
        driver.query();
        var resultUtils = new ResultUtils();
        while (driver.next()) {
            var series;
            if (driver.getValue('junior') === 'true') {
                series = gs.getProperty('x_704397_generally.juniorSeries');
            } else {
                series = driver.getElement('team.series');
            }
            driver.setValue(
                'points',
                this.calculatePoints(driver, resultUtils.getPointAllocation(series))
            );
            driver.update();
        }
    },

    getFinishes: function(driver) {
        var finishes = "";
        for (var i = 0; i < gs.getProperty('x_704397_generally.lastPosition'); i++) {
            if (i == gs.getProperty('x_704397_generally.lastPosition') - 1) {
                finishes += this.getPositionCount(driver, i + 1)
                    .toString(gs.getProperty('x_704397_generally.radix'));
            } else {
                finishes += this.getPositionCount(driver, i + 1)
                    .toString(gs.getProperty('x_704397_generally.radix')) + ",";
            }
        }
        return finishes;
    },

    getReversedPointsProgress: function(driver, series) {
        var resultUtils = new ResultUtils();
        var pointAllocation = resultUtils.getPointAllocation(series);
        var progress = "";
        for (var i = resultUtils.getRoundCount(series); i > 0; i--) {
            var result = new GlideRecord('x_704397_generally_result');
            result.addQuery('year', gs.getProperty('x_704397_generally.actualYear'));
            result.addQuery('driver', driver.getValue('sys_id'));
            result.addQuery('round', i);
            result.query();
            if (result.next()) {
                var position = result.getValue('position');
                if (i == gs.getProperty('x_704397_generally.firstPosition')) {
                    progress += pointAllocation[position - 1]
                        .toString(gs.getProperty('x_704397_generally.radix'));
                } else {
                    progress += pointAllocation[position - 1]
                        .toString(gs.getProperty('x_704397_generally.radix')) + ",";
                }
            }
        }
        return progress;
    },

    calculateStandings: function(series) {
        var driver = new GlideRecord('x_704397_generally_driver');
        driver.addQuery('team.year', gs.getProperty('x_704397_generally.actualYear'));
        if (series === gs.getProperty('x_704397_generally.juniorSeries')) {
            driver.addQuery('junior', 'true');
        } else {
            driver.addQuery('team.series', series);
            driver.addQuery('junior', 'false');
        }
        driver.query();
        var resultUtils = new ResultUtils();
        var standings = [];
        while (driver.next()) {
            var performance = {
                driver: driver.getValue('sys_id'),
                points: parseInt(driver.getValue('points')),
                finishes: this.getFinishes(driver),
                reversedPointsProgress: this.getReversedPointsProgress(driver, series)
            };
            standings.push(performance);
        }
        resultUtils.sortStandings(standings);
        return standings;
    },

    updateStandings: function(standings) {
        for (var i = 0; i < gs.getProperty('x_704397_generally.lastPosition'); i++) {
            var driver = new GlideRecord('x_704397_generally_driver');
            driver.addQuery('sys_id', standings[i].driver);
            driver.query();
            if (driver.next()) {
                driver.setValue('standing', i + 1);
                driver.update();
            }
        }
    },

    updateSeasonInfo: function() {
        this.updatePoints();
        var series = gs.getProperty('x_704397_generally.series').split(',');
        for (var i = 0; i < series.length; i++) {
            this.updateStandings(this.calculateStandings(series[i]));
        }
    },

    type: 'DriverUtils'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2021-11-11 10:49:29</sys_created_on>
        <sys_id>1b2fa3f41b733010b07fa9b4bd4bcb1d</sys_id>
        <sys_mod_count>5</sys_mod_count>
        <sys_name>DriverUtils</sys_name>
        <sys_package display_value="Generally" source="x_704397_generally">3d82299c1b333010b07fa9b4bd4bcb01</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="Generally">3d82299c1b333010b07fa9b4bd4bcb01</sys_scope>
        <sys_update_name>sys_script_include_1b2fa3f41b733010b07fa9b4bd4bcb1d</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2022-01-18 09:27:04</sys_updated_on>
    </sys_script_include>
</record_update>
