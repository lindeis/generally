<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_704397_generally.TeamUtils</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>TeamUtils</name>
        <script><![CDATA[var TeamUtils = Class.create();
TeamUtils.prototype = Object.extendsObject(Utils, {
    initialize: function() {
        gs.include('Utils');
    },
    type: 'TeamUtils',

    championship: 'team',
    resourceInterval: parseInt(gs.getProperty('x_704397_generally.resourceInterval')),

    employmentAgency: function(year) {
        return 'year=' + year + '^nameISEMPTY';
    },

    competitors: function(year) {
        return 'year=' + year + '^sys_id!=' + this.getEmploymentAgency(year);
    },

    getEmploymentAgency: function(year) {
        var team = new GlideRecord('x_704397_generally_team');
        team.addEncodedQuery(this.employmentAgency(year));
        team.query();
        if (team.next()) {
            return team.getUniqueValue();
        }
    },

    generateEmploymentAgency: function() {
        var team = new GlideRecord('x_704397_generally_team');
        team.initialize();
        team.setValue('year', this.currentYear);
        team.insert();
    },

    getRandomResource: function(standing) {
        var baseResource = Math.floor(Math.random() * this.resourceInterval);
        switch (arguments.length) {
            case 0:
                return baseResource;
            case 1:
                var resource = baseResource + this.getResourceBonusAllocation()[standing - 1];
                if (resource > this.resourceInterval - 1) {
                    return this.resourceInterval - 1;
                }
                return resource;
        }
    },

    generateNewTeam: function(teamInfoObj) {
        var newTeam = new GlideRecord('x_704397_generally_team');
        newTeam.initialize();
        newTeam.setValue('year', this.currentYear);
        newTeam.setValue('name', teamInfoObj.getUniqueValue());
        newTeam.setValue('series', 'wrc');
        newTeam.setValue('prestige', 0);
        newTeam.setValue('pressure', 0);
        newTeam.setValue('resource', this.getRandomResource());
        newTeam.insert();
    },

    confirmLineup: function(teamObj, driver1Id, driver2Id, juniorDriverId) {
        driverUtils.signContract(driver1Id, teamObj);
        driverUtils.signContract(driver2Id, teamObj);
        driverUtils.signContract(juniorDriverId, teamObj);
    },

    updatePoints: function() {
        var team = new GlideRecord('x_704397_generally_team');
        team.addEncodedQuery(this.competitors(this.currentYear));
        team.query();
        while (team.next()) {
            var points = team.getElement('driver1.points') + team.getElement('driver2.points');
            team.setValue('points', points);
            team.update();
        }
    },

    updateSeasonInfo: function() {
        this.updatePoints();
        for (var i = 0; i < this.series.length; i++) {
            var standings = resultUtils.calculateStandings(true,
                this.championship, this.series[i]);
            resultUtils.updateStandings(standings);
            var standingsBeforeFinale = resultUtils.calculateStandings(false,
                this.championship, this.series[i]);
            resultUtils.updateContenders(this.series[i], standingsBeforeFinale);
        }
    },

    setTeamFame: function(teamObj, standing, teamEntryObj) {
        var prestige = parseInt(teamObj.getValue('prestige'));
        var pressure = parseInt(teamObj.getValue('pressure'));
        if (standing === this.firstPosition) {
            teamEntryObj.setValue('prestige', prestige + 1);
            teamEntryObj.setValue('pressure', pressure);
        } else if (standing === this.lastPosition / this.seatsPerTeam) {
            if (prestige > 0) {
                teamEntryObj.setValue('prestige', prestige - 1);
                teamEntryObj.setValue('pressure', pressure);
            } else {
                teamEntryObj.setValue('prestige', prestige);
                teamEntryObj.setValue('pressure', pressure + 1);
            }
        } else {
            teamEntryObj.setValue('prestige', prestige);
            teamEntryObj.setValue('pressure', pressure);
        }
    },

    setTeamMarketInfo: function(teamObj, teamEntryObj) {
        var standing = parseInt(teamObj.getValue('standing'));
        this.setTeamFame(teamObj, standing, teamEntryObj);
        teamEntryObj.setValue('resource', this.getRandomResource(standing));
    },

    resetTeamMarketInfo: function(teamEntryObj, cause) {
        teamEntryObj.setValue('prestige', 0);
        teamEntryObj.setValue('pressure', 0);
		switch (cause) {
			case 'promotion':
				var lastPosition = this.lastPosition / this.seatsPerTeam;
				teamEntryObj.setValue('resource', this.getRandomResource(lastPosition));
				break;
			case 'relegation':
				teamEntryObj.setValue('resource', this.getRandomResource(this.firstPosition));
		}
    },

    setTeamSeries: function(teamObj, teamEntryObj) {
        var pressure = parseInt(teamEntryObj.getValue('pressure'));
        var series = teamObj.getValue('series');
        if (pressure === this.getPatience(series)) {
            var tier = this.series.indexOf(series);
            if (this.series[tier + 1] === this.juniorSeries) {
                teamEntryObj.setAbortAction(true);
            } else {
                teamEntryObj.setValue('series', this.series[tier + 1]);
				this.resetTeamMarketInfo(teamEntryObj, 'relegation');
            }
        } else {
            teamEntryObj.setValue('series', series);
        }
    },

    generateTeamEntries: function() {
        var team = new GlideRecord('x_704397_generally_team');
        team.addEncodedQuery(this.competitors(this.lastYear));
        team.orderBy('series');
        team.orderBy('standing');
        team.query();
        while (team.next()) {
            var teamEntry = new GlideRecord('x_704397_generally_team');
            teamEntry.initialize();
            teamEntry.setValue('year', this.currentYear);
            teamEntry.setValue('name', team.getValue('name'));
            this.setTeamMarketInfo(team, teamEntry);
            this.setTeamSeries(team, teamEntry);
            teamEntry.insert();
        }
    }
});]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-02-03 16:06:00</sys_created_on>
        <sys_id>96ac9dc81b610110aa740d41604bcb0d</sys_id>
        <sys_mod_count>14</sys_mod_count>
        <sys_name>TeamUtils</sys_name>
        <sys_package display_value="Generally" source="x_704397_generally">3d82299c1b333010b07fa9b4bd4bcb01</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="Generally">3d82299c1b333010b07fa9b4bd4bcb01</sys_scope>
        <sys_update_name>sys_script_include_96ac9dc81b610110aa740d41604bcb0d</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2022-02-24 15:35:24</sys_updated_on>
    </sys_script_include>
</record_update>
