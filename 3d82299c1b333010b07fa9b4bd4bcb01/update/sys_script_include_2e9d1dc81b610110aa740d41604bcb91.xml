<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_704397_generally.DriverUtils</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>DriverUtils</name>
        <script><![CDATA[var DriverUtils = Class.create();
DriverUtils.prototype = Object.extendsObject(Utils, {
    initialize: function() {
        gs.include('Utils');
    },
    type: 'DriverUtils',

    ageInterval: parseInt(gs.getProperty('x_704397_generally.rookieAgeInterval')),
    juniorAgeInterval: parseInt(gs.getProperty('x_704397_generally.juniorRookieAgeInterval')),
    minAge: parseInt(gs.getProperty('x_704397_generally.rookieMinAge')),
    juniorMinAge: parseInt(gs.getProperty('x_704397_generally.juniorRookieMinAge')),
    skillInterval: parseInt(gs.getProperty('x_704397_generally.rookieSkillInterval')),
    juniorSkillInterval: parseInt(gs.getProperty('x_704397_generally.juniorRookieSkillInterval')),

    currentCompetitors: function(series) {
        var query = 'team.year=' + this.currentYear;
        switch (arguments.length) {
            case 0:
                return query += '^team!=' + teamUtils.getEmploymentAgency();
            case 1:
                if (series === this.juniorSeries) {
                    return query += '^junior=true';
                } else {
                    return query += '^junior=false' + '^team.series=' + series;
                }
        }
    },

    isJuniorRookie: function(driverInfoObj) {
        if (driverInfoObj.helmet.nil()) {
            return true;
        }
        return false;
    },

    getRandomAge: function(isJunior) {
        if (isJunior) {
            return Math.floor(Math.random() * this.juniorAgeInterval + this.juniorMinAge);
        }
        return Math.floor(Math.random() * this.ageInterval + this.minAge);
    },

    getRandomSkill: function(isJunior) {
        if (isJunior) {
            return Math.floor(Math.random() * this.juniorSkillInterval);
        }
        return Math.floor(Math.random() * this.skillInterval);
    },

    generateRookie: function(driverInfoObj) {
        var rookie = new GlideRecord('x_704397_generally_driver');
        rookie.initialize();
        rookie.setValue('abbrev', driverInfoObj.getUniqueValue());
        rookie.setValue('display', driverInfoObj.getValue('abbrev'));
        rookie.setValue('age', this.getRandomAge(this.isJuniorRookie(driverInfoObj)));
        rookie.setValue('skill', this.getRandomSkill(this.isJuniorRookie(driverInfoObj)));
        rookie.setValue('team', teamUtils.getEmploymentAgency());
        rookie.insert();
    },

    getDisplay: function(driverObj, teamObj) {
        var driverAbbrev = driverObj.getDisplayValue('abbrev');
        var teamAbbrev = teamObj.getElement('name.abbrev');
        return driverAbbrev.concat(" (", teamAbbrev, ")");
    },

    signContract: function(driverId, teamObj) {
        var signatory = new GlideRecord('x_704397_generally_driver');
        signatory.get(driverId);
        signatory.setValue('display', this.getDisplay(signatory, teamObj));
        signatory.setValue('team', teamObj.getUniqueValue());
        if (teamObj.getValue('junior_driver') === driverId) {
            signatory.setValue('junior', 'true');
        } else {
            signatory.setValue('junior', 'false');
        }
        signatory.update();
    },

    getSeries: function(driverObj) {
        var series = driverObj.getElement('team.series');
        if (driverObj.getValue('junior') === 'true') {
            series = this.juniorSeries;
        }
        return series;
    },

    calculatePoints: function(driverId, series) {
        var points = 0;
        for (var i = 0; i < this.lastPosition; i++) {
            points += resultUtils.getPositionCount(driverId, i + 1) *
                this.getPointAllocation(series)[i];
        }
        return points;
    },

    updatePoints: function() {
        var driver = new GlideRecord('x_704397_generally_driver');
        driver.addEncodedQuery(this.currentCompetitors());
        driver.query();
        while (driver.next()) {
            driver.setValue(
                'points',
                this.calculatePoints(driver.getUniqueValue(), this.getSeries(driver))
            );
            driver.update();
        }
    },

    calculateStandings: function(series) {
        var driver = new GlideRecord('x_704397_generally_driver');
        driver.addEncodedQuery(this.currentCompetitors(series));
        driver.query();
        var standings = [];
        while (driver.next()) {
            standings.push(resultUtils.getPerformance(driver, series));
        }
        this.sortStandings(standings);
        return standings;
    },

    updateStandings: function(standings) {
        for (var i = 0; i < this.lastPosition; i++) {
            var driver = new GlideRecord('x_704397_generally_driver');
            driver.get(standings[i].driver);
            driver.setValue('standing', i + 1);
            driver.update();
        }
    },

    updateSeasonInfo: function() {
        this.updatePoints();
        for (var i = 0; i < this.series.length; i++) {
            this.updateStandings(this.calculateStandings(this.series[i]));
        }
    }
});]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-02-03 16:16:50</sys_created_on>
        <sys_id>2e9d1dc81b610110aa740d41604bcb91</sys_id>
        <sys_mod_count>10</sys_mod_count>
        <sys_name>DriverUtils</sys_name>
        <sys_package display_value="Generally" source="x_704397_generally">3d82299c1b333010b07fa9b4bd4bcb01</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="Generally">3d82299c1b333010b07fa9b4bd4bcb01</sys_scope>
        <sys_update_name>sys_script_include_2e9d1dc81b610110aa740d41604bcb91</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2022-02-16 11:10:52</sys_updated_on>
    </sys_script_include>
</record_update>
